const pool = require('../db');
const bcrypt = require('bcrypt');
const userModel = require('../models/userModel');
const { generateToken } = require('../utils/jwt');



const JWT_EXPIRY = '1h';


// üìå ƒêƒÉng k√Ω t√†i kho·∫£n
register = async (req, res) => {
  const { full_name, username, password, role } = req.body;

  // Ki·ªÉm tra ƒë·∫ßu v√†o
  if (!username || !password)
    return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß username v√† m·∫≠t kh·∫©u.' });
  if (username.length < 4)
    return res.status(400).json({ message: 'Username ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±.' });
  if (password.length < 6)
    return res.status(400).json({ message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.' });

  try {
    // Ki·ªÉm tra tr√πng username
    const existingUser = await userModel.findByUsername(username);
    if (existingUser)
      return res.status(400).json({ message: 'Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn username kh√°c.' });

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hash = await bcrypt.hash(password, 10);

    // Th√™m user m·ªõi
    const result = await userModel.createUser(username, hash, full_name, role);

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi
    res.json({
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng, ƒëang chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p...',
      userId: result.insertId,
      redirect: '/login'
    });
  } catch (err) {
    console.error('L·ªói ƒëƒÉng k√Ω:', err);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
}



getDashboard = async (req, res) => {
  try {
    const [rows] = await pool.query('SELECT user_id, full_name, username FROM users WHERE user_id = ?', [req.user.id]);
    if (!rows.length) return res.status(404).json({ message: 'User not found' });
    res.json({ user: rows[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
};




login = async (req, res) => {
  // res.clearCookie('token'); // X√≥a cookie c≈© n·∫øu c√≥
  
  const { username, password } = req.body;
  if (!username || !password)
    return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p username v√† m·∫≠t kh·∫©u.' });

  try {
    const user = await userModel.findByUsername(username);
    if (!user)
      return res.status(400).json({ message: 'Username ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.' });

    // So s√°nh m·∫≠t kh·∫©u
    const match = await bcrypt.compare(password, user.password_hash);
    if (!match)
      return res.status(400).json({ message: 'Username ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.' });

    // T·∫°o JWT
    const token = generateToken({
      id: user.user_id,
      username: user.username,
      role: user.role,
    }, JWT_EXPIRY);

    // L∆∞u token v√†o cookie
    res.cookie('token', token, {
      httpOnly: true,
      sameSite: 'lax',
      maxAge: 1000 * 60 * 60 // 1 gi·ªù
    });

    res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', role: user.role });
  } catch (err) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', err);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.' });
  }
}

logout = (req, res) => {
  res.clearCookie('token');
  res.json({ message: 'ƒê√£ ƒëƒÉng xu·∫•t.' });
  console.log('User logged out, token cookie cleared.');
}

getMe = async (req, res) => {
  try {
    const username = req.user.username;
    const user = await userModel.findByUsername(username);

    if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    // ch·ªâ tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n, kh√¥ng g·ª≠i password
    res.json({
      user_id: user.user_id,
      username: user.username,
      full_name: user.full_name,
      role: user.role,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'L·ªói server' });
  }
};
module.exports = {
  register,
  login,
  logout,
  getMe
};